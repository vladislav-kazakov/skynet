<html>
<head>
<link rel="stylesheet" type="text/css" href="style.css" />

<script>
var context;
var gridCanvas;					
var counterSpan;
var controlLink;
var clearLink;
var minimumSelect;
var maximumSelect;
var spawnSelect;
			
var OCCUPIED = 1;
var VACANT = 0;
var LARVAE = 2;

var CELL_SIZE = 8;
var X = 576;
var Y = 320;
var WIDTH = X / CELL_SIZE;
var HEIGHT = Y / CELL_SIZE;
var DELAY = 200;
var STOPPED = 0;
var RUNNING = 1;

var gameState = STOPPED;
var gameInterval;
var counter = 0;
var greenPopulation = 0;
var animalPopulation = 0;

// конструктор
function GreenCell(x, y) {
	this.posX = x;
	this.posY = y;
	this.alive = true;
	this.larvae = true;
	this.fat = 0;
	this.age = 0;
	this.state = 0;
}
GreenCell.prototype.sleep = function()
{
	if (Math.random()<this.age * this.age/160000) this.alive = false;
	return;
}
GreenCell.prototype.move = function()
{
	return;
}
GreenCell.prototype.rot = function()
{
	if (this.alive == false) removeGreenCell(this.posX, this.posY);
}
GreenCell.prototype.lookForGreenCell = function(direction)
{
	var something = searchGreenCell(getX(this.posX, direction), getY(this.posY, direction))
	if ( something != null) return OCCUPIED;
	return VACANT;
}

GreenCell.prototype.eat = function()
{
	return;
}

GreenCell.prototype.breed = function()
{
	if (this.larvae) return;
	var seed = [0,0,0,0,0,0,0,0];
	for (var direction=0; direction<=7; direction++)
	{
		if (this.lookForGreenCell(direction)==VACANT && Math.random()>0.9)
		{
			spawnGreenCell(getX(this.posX, direction), getY(this.posY, direction));
		}
	}
}
GreenCell.prototype.grow = function()
{
	if (this.larvae == true) this.larvae = false;
	else this.age++;
}
GreenCell.prototype.draw = function() {

	let color = 200 - this.age*5;
	if (color < 100) color = 100;
	context.fillStyle = "rgb(0," + color + ",0)";
	context.fillRect(
			this.posX * CELL_SIZE +1, 
			this.posY * CELL_SIZE +1, 
			CELL_SIZE -1,
			CELL_SIZE -1);

	let animalCell = searchAnimalCell(this.posX, this.posY);
	if (animalCell) animalCell.draw();


};
GreenCell.prototype.program = function()
{
	switch (this.state)
	{
	case 0:
		this.grow();
		break;
	case 1:
		this.eat();
		break;
	case 2:
		this.breed();
		break;
	case 3:
		this.sleep();
		break;
	case 4:
		this.rot();
		break;	
	case 5:
		this.move();
		break;			
	}
	this.state++;
	if (this.state == 6) this.state = 0;
}

// конструктор
function AnimalCell(x, y) {
	this.posX = x;
	this.posY = y;
	this.alive = true;
	this.larvae = true;
	this.fat = 2;
	this.age = 0;
	this.state = 0;
}
AnimalCell.prototype.sleep = function()
{
	if (this.larvae) return;
	if (this.fat>=1) this.fat -= 0;
	else this.alive = false;
	if (Math.random()<this.age * this.age/40000) this.alive = false;
}
AnimalCell.prototype.move = function()
{
	if (this.fat>=10) return;
	if (this.larvae) return;
	//var direction = Math.round(Math.random() * 9)-1;
	let left = 0, top = 0; 
	
	for(var i = 0; i<8; i++){
		if (this.lookForGreenCell(i)== OCCUPIED){
			left += directions[i][0];
			top += directions[i][1];
		}
	}
	for(var i = 0; i<8; i+= 0.5){
		if (this.lookRangedForGreenCell(i, 2)== OCCUPIED){
			left += directions[Math.floor(i)][0];
			top += directions[Math.floor(i)][1];
		}
	}
	for(var i = 0; i<8; i+= 0.333){
		if (this.lookRangedForGreenCell(i, 3)== OCCUPIED){
			left += directions[Math.floor(i)][0];
			top += directions[Math.floor(i)][1];
		}
	}	
	var direction = getDirection(left, top);
	if (direction == null) direction = Math.round(Math.random() * 9)-1;
	if (direction<0 || direction>7) return;
	if (this.lookForAnimalCell(direction)!= VACANT) return;
	this.posX = getX(this.posX, direction);
	this.posY = getY(this.posY, direction);	
	this.fat-= 1;
}
AnimalCell.prototype.moveBreed = function()
{
	if (this.fat>=10) return;
	if (this.larvae) return;
	if (this.fat < 5) return;
	//var direction = Math.round(Math.random() * 9)-1;
	let left = 0, top = 0; 
	
	for(var i = 0; i<8; i++){
		if (this.lookForAnimalCell(i)== OCCUPIED){
			left += directions[i][0];
			top += directions[i][1];
		}
	}
	for(var i = 0; i<8; i+= 0.5){
		if (this.lookRangedForAnimalCell(i, 2)== OCCUPIED){
			left += directions[Math.floor(i)][0];
			top += directions[Math.floor(i)][1];
		}
	}
/*	for(var i = 0; i<8; i+= 0.333){
		if (this.lookRangedForAnimalCell(i, 3)== OCCUPIED){
			left += directions[Math.floor(i+0.35)][0];
			top += directions[Math.floor(i+0.35)][1];
		}
	}	*/
	var direction = getDirection(left, top);
	if (direction == null) direction = Math.round(Math.random() * 9)-1;
	if (direction<0 || direction>7) return;
	if (this.lookForAnimalCell(direction)!= VACANT) return;
	this.posX = getX(this.posX, direction);
	this.posY = getY(this.posY, direction);	
	this.fat-= 1;
}
AnimalCell.prototype.rot = function()
{
	if (this.alive == false) removeAnimalCell(this.posX, this.posY);
}
AnimalCell.prototype.lookForAnimalCell = function(direction)
{
	var something = searchAnimalCell(getX(this.posX, direction), getY(this.posY, direction))
	if ( something != null && something.larvae == false) return OCCUPIED;
	if ( something != null && something.larvae == true) return LARVAE;
	return VACANT;
}
AnimalCell.prototype.lookRangedForAnimalCell = function(direction, range)
{
	var something = searchAnimalCell(getRangedX(this.posX, direction, range), getRangedY(this.posY, direction,range))
	if ( something != null && something.larvae == false) return OCCUPIED;
	if ( something != null && something.larvae == true) return LARVAE;
	return VACANT;
}
AnimalCell.prototype.lookForGreenCell = function(direction)
{
	var something = searchGreenCell(getX(this.posX, direction), getY(this.posY, direction))
	if ( something != null) return OCCUPIED;
	return VACANT;
}
AnimalCell.prototype.lookRangedForGreenCell = function(direction, range)
{
	var something = searchGreenCell(getRangedX(this.posX, direction, range), getRangedY(this.posY, direction,range))
	if ( something != null) return OCCUPIED;
	return VACANT;
}
AnimalCell.prototype.eat = function()
{
	if (this.larvae) return;
	let eaten = 0;
	var unsorted = unsortedDirections();
	for (var direction=0; direction<=7; direction++)
	{
		if (eaten >= 3) return;
		if (this.fat>=5) return;
		if (this.lookForGreenCell(unsorted[direction]) == OCCUPIED)
		{
			eaten++;
			this.fat++;
			removeGreenCell(getX(this.posX, unsorted[direction]), getY(this.posY, unsorted[direction]));
		}
	}
}

AnimalCell.prototype.breed = function()
{
	if (this.larvae) return;
	var seed = [0,0,0,0,0,0,0,0];
	for (var direction=0; direction<=7; direction++)
	{
		if (this.lookForAnimalCell(direction) == OCCUPIED)
		{
			var place = direction+1; if (place>7)place-=8; seed[place]++;
			var place = direction+2; if (place>7)place-=8; seed[place]++;
			var place = direction-1; if (place<0)place+=8; seed[place]++;
			var place = direction-2; if (place<0)place+=8; seed[place]++;
		}
	}
	for (var direction=0; direction<=7; direction++)
	{
		if (seed[direction]>=1 && this.lookForAnimalCell(direction)==VACANT && Math.random()>0.95){
			spawnAnimalCell(getX(this.posX, direction), getY(this.posY, direction));
			this.fat-= 1;
		}
	}
}
AnimalCell.prototype.grow = function()
{
	if (this.larvae == true) this.larvae = false;
	else this.age++;
	this.fat-= 1;
}
AnimalCell.prototype.draw = function() {
	/*if (this.larvae)
		context.fillStyle = "#faa";
	else*/{
		//let color = 200 - this.age*10;
		//if (color < 0) color = 0;
		//context.fillStyle = "rgb(" + color + "," + color + "," + color + ")";
		let color = 200 - this.age*5;
		if (color < 100) color = 100;
		context.fillStyle = "rgb(" + color + ", 0, 0)";
	}
		//context.fillStyle = "#000";
	context.fillRect(
			this.posX * CELL_SIZE +1 +2, 
			this.posY * CELL_SIZE +1 +2, 
			CELL_SIZE -1 -3,
			CELL_SIZE -1 -3);
};

AnimalCell.prototype.program = function()
{
	switch (this.state)
	{
	case 0:
		this.grow();
		break;
	case 1:
		this.eat();
		break;
	case 2:
		this.moveBreed();
		this.breed();
		break;
	case 3:
		this.sleep();
		break;
	case 4:
		this.rot();
		break;	
	case 5:
		this.move();
		break;			
	}
	this.state++;
	if (this.state == 6) this.state = 0;
}

var directions = [[-1,-1], [0,-1], [1,-1], [1,0], [1,1], [0,1], [-1,1], [-1,0]];
function unsortedDirections()
{
	var array = [0, 1, 2, 3, 4, 5, 6, 7];
    let counter = array.length;

    // While there are elements in the array
    while (counter > 0) {
        // Pick a random index
        let index = Math.floor(Math.random() * counter);

        // Decrease counter by 1
        counter--;

        // And swap the last element with it
        let temp = array[counter];
        array[counter] = array[index];
        array[index] = temp;
    }
console.log(array);
    return array;
}
function getDirection(dx,dy)
{
	let left = dx==0 ? 0 : dx/Math.abs(dx);
	let top = dy==0 ? 0 : dy/Math.abs(dy);
	for (var i =0; i<8; i++)
	{
		if (directions[i][0] == left && directions[i][1] == top) {return i;}
	}
	return null;
}
function getX(x,direction)
{
	var _x = x;
	_x += directions[direction][0];
	if (_x < 0) _x+= WIDTH;
	if (_x >= WIDTH) _x-= WIDTH;
	return _x;
}
function getRangedX(x,direction,range)
{
	var _x;
	if (direction >= 0 && direction <= 2) _x = x +(direction * range - range);
	if (direction > 2 && direction < 4) _x = x +range;	
	if (direction >= 4 && direction <= 6) _x = x - direction * range +5*range;		
	if (direction > 6 && direction < 8) _x = x - range;
	
	if (_x < 0) _x+= WIDTH;
	if (_x >= WIDTH) _x-= WIDTH;
	return _x;
}
function getY(y,direction)
{
		y += directions[direction][1];
		if (y<0) y+= HEIGHT;
		if (y>=HEIGHT) y-= HEIGHT;
		return y;
}
function getRangedY(y,direction,range)
{
	var _y;
	if (direction >= 0 && direction <= 2) _y = y - range;
	if (direction > 2 && direction < 4)_y = y +(direction * range - 3*range);
	if (direction >= 4 && direction <= 6) _y = y +range;		
	if (direction > 6 && direction < 8) _y = y - direction * range +7*range;	
	
	if (_y < 0) _y+= WIDTH;
	if (_y >= WIDTH) _y-= WIDTH;
	return _y;
}
function search(x, y)
{
	var foundCells = new Array();
	for(var i = 0; i < cells.length; i++)
	{
		if (cells[i].posX == x && cells[i].posY == y)
			foundCells.push(cells[i]);
	}
	return foundCells;
}
function searchAnimalCell(x, y)
{
	for(var i = 0; i < cells.length; i++)
	{
		if (cells[i].posX == x && cells[i].posY == y && cells[i] instanceof AnimalCell)
			return cells[i];
	}
	return null;
}
function searchGreenCell(x, y)
{
	for(var i = 0; i < cells.length; i++)
	{
		if (cells[i].posX == x && cells[i].posY == y && cells[i] instanceof GreenCell)
			return cells[i];
	}
	return null;
}
function spawnAnimalCell(x,y)
{
	if (searchAnimalCell(x, y) != null) return false;
	cells.push(new AnimalCell(x, y));
}
function spawnGreenCell(x,y)
{
	if (searchGreenCell(x, y) != null) return false;
	cells.push(new GreenCell(x, y));
}
function removeGreenCell(x,y)
{
	for(var i = 0; i < cells.length; i++)
	{
		if (cells[i].posX == x && cells[i].posY == y && cells[i] instanceof GreenCell) cells.splice(i, 1);
	}
}
function removeAnimalCell(x,y)
{
	for(var i = 0; i < cells.length; i++)
	{
		if (cells[i].posX == x && cells[i].posY == y && cells[i] instanceof AnimalCell) cells.splice(i, 1);
	}
}

function newDay()
{
	LifeCycle();
	redraw();
}

var action = 0;
function LifeCycle()
{
	for(var i = 0; i < cells.length; i++) cells[i].program();
		
	action++;
	if (action == 6)
{	action = 0;
	counter++;
	
	greenPopulation = 0;
	animalPopulation = 0;
	for (var i = 0; i<cells.length; i++)
	{
		if (cells[i] instanceof GreenCell) greenPopulation++;
		if (cells[i] instanceof AnimalCell) animalPopulation++;
	}
	
	counterSpan.innerHTML = counter;
	greenPopulationSpan.innerHTML = greenPopulation;
	animalPopulationSpan.innerHTML = animalPopulation;
}
}

var cells = new Array();

function redraw()
{
	for (var h = 0; h < HEIGHT; h++) {
		for (var w = 0; w < WIDTH; w++) {
			context.fillStyle = "#eee";
			context.fillRect(
					w * CELL_SIZE +1,
					h * CELL_SIZE +1,
					CELL_SIZE -1,
					CELL_SIZE -1);
		}
	}
	for(var i = 0; i < cells.length; i++)
	{
		if (cells[i].alive == true)	cells[i].draw();

	}
/*	for(var i = 0; i < cells.length; i++)
	{
		if (cells[i].alive == true && cells[i] instanceof AnimalCell)	cells[i].draw();
	}*/
}

function canvasOnClickHandler(event) {
	var positionX = getCursorPositionX(event);
	var positionY = getCursorPositionY(event);
	cell = searchAnimalCell(positionX, positionY);
	if (cell == null) spawnAnimalCell(positionX, positionY);
	else removeAnimalCell(positionX, positionY);
	redraw();
};

function canvasOnRightClickHandler(event) {
	var positionX = getCursorPositionX(event);
	var positionY = getCursorPositionY(event);
	cell = searchGreenCell(positionX, positionY);
	if (cell == null) spawnGreenCell(positionX, positionY);
	else removeGreenCell(positionX, positionY);
	redraw();
	return false;
};

function getCursorPositionX(event) {
	var x;
	if (event.pageX) {
		x = event.pageX;
	} else {
		x = event.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
	}
	x -= gridCanvas.offsetLeft;
	var positionX = Math.floor((x - 2) / CELL_SIZE);
	return positionX;
};
function getCursorPositionY(event) {
	var y;
	if (event.pageY) {
		y = event.pageY;
	} else {
		y = event.clientY + document.body.scrollTop + document.documentElement.scrollTop;
	}
	y -= gridCanvas.offsetTop;
	var positionY = Math.floor((y - 4) / CELL_SIZE);
	return positionY;
};


					
document.addEventListener("DOMContentLoaded", 
function() {
gridCanvas = document.getElementById('grid');					
counterSpan = document.getElementById("counter");
greenPopulationSpan = document.getElementById("greenPopulation");
animalPopulationSpan = document.getElementById("animalPopulation");
controlLink = document.getElementById("controlLink");
clearLink = document.getElementById("clearLink");
createGrassLink = document.getElementById("createGrassLink");
minimumSelect = document.getElementById("minimumSelect");
maximumSelect = document.getElementById("maximumSelect");
spawnSelect = document.getElementById("spawnSelect");	

gridCanvas.addEventListener("click", canvasOnClickHandler, false);
gridCanvas.oncontextmenu = function(e){canvasOnRightClickHandler(e); return false;};

controlLink.onclick = function() {
			switch (gameState) {
			case STOPPED:
				gameInterval = setInterval(function() {
					newDay();
				}, DELAY);
				gameState = RUNNING;
				break;
			default:
				clearInterval(gameInterval);
				gameState = STOPPED;
			}
		};
		
		clearLink.onclick = function() {
			cells = new Array();
			redraw();
		}	
		createGrassLink.onclick = function() {
			cells = new Array();
			for (var i = 0; i < WIDTH; i++){
				for (var j = 0; j < HEIGHT; j++){
					spawnGreenCell(i, j);
				}	
			}
			redraw();
		}	
	
/*	matrix = function (m, n, initial) {
		var a, i, j, mat = [];
		for (i = 0; i < m; i += 1) {
			a = [];
			for (j = 0; j < n; j += 1) {
				a[j] = 0;
			}
			mat[i] = a;
		}
		return mat;
	};
					
					
					
					
					var Life = {};
		
					
					Life.state = Life.STOPPED;
					Life.interval = null;
					
					Life.grid = matrix(Life.HEIGHT, Life.WIDTH, 0);
										
					Life.counter = 0;
									
					Life.updateState = function() {
						var neighbours;
						
						var nextGenerationGrid = matrix(Life.HEIGHT, Life.WIDTH, 0);
						
						for (var h = 0; h < Life.HEIGHT; h++) {
							for (var w = 0; w < Life.WIDTH; w++) {
								neighbours = Life.calculateNeighbours(h, w);
								if (Life.grid[h][w] !== Life.DEAD) {
									if ((neighbours >= Life.minimum) && (neighbours <= Life.maximum)) {
										nextGenerationGrid[h][w] = Life.ALIVE;
									}
								} else {
									if (neighbours === Life.spawn) {
										nextGenerationGrid[h][w] = Life.ALIVE;
									}
								}
							}
						}
						Life.copyGrid(nextGenerationGrid, Life.grid);
						Life.counter++;
					};
									
					Life.calculateNeighbours = function(y, x) {				
						var total = (Life.grid[y][x] !== Life.DEAD) ? -1 : 0;
						for (var h = -1; h <= 1; h++) {
							for (var w = -1; w <= 1; w++) {
								if (Life.grid[(Life.HEIGHT + (y + h)) % Life.HEIGHT][(Life.WIDTH + (x + w)) % Life.WIDTH] !== Life.DEAD) {
									total++;
								}
							}
						}
						return total;
					};

					Life.copyGrid = function(source, destination) {
						for (var h = 0; h < Life.HEIGHT; h++) {

							destination[h] = source[h].slice(0);
						}
					};
		
					
					function update() {
						Life.updateState();
					    //updateInput();
					    //updateAI();
					    //updatePhysics();
					    updateAnimations();
					    //updateSound();
					    //updateVideo();
					};
					
					function updateAnimations() {
						for (var h = 0; h < Life.HEIGHT; h++) {
							for (var w = 0; w < Life.WIDTH; w++) {
								if (Life.grid[h][w] === Life.ALIVE) {
									context.fillStyle = "#000";									
								} else {
									context.fillStyle = "#eee";
									//context.clearRect();
								}
								context.fillRect(
										w * Life.CELL_SIZE +1, 
										h * Life.CELL_SIZE +1, 
										Life.CELL_SIZE -1,
										Life.CELL_SIZE -1);
							}
						}
						counterSpan.innerHTML = Life.counter;	
					};
	*/				
					if (gridCanvas.getContext) {
						context = gridCanvas.getContext('2d');
						var offset = CELL_SIZE;
					
						for (var x = 0; x <= X; x += CELL_SIZE) {
							context.moveTo(0.5 + x, 0);
							context.lineTo(0.5 + x, Y);
						}
						for (var y = 0; y <= Y; y += CELL_SIZE) {
							context.moveTo(0, 0.5 + y);
							context.lineTo(X, 0.5 + y);
						}
						context.strokeStyle = "#fff";
						context.stroke();
						redraw();
						

					} else {
						alert("Canvas is unsupported in your browser.");
					}
					
  }
  
  
);
</script>
</head>
<body>
		<div id="container">
			<div id="left-content">
				<p>Day: <span id="counter">0</span>
				<span style="display:inline-block;width:50px;"></span>Green population: <span id="greenPopulation">0</span>				<span style="display:inline-block;width:50px;"></span>Animal population: <span id="animalPopulation">0</span></p>
				<canvas id="grid" width="577" height="321"></canvas>
			</div>
			<div id="right-content">
				<h2>Controls</h2>
				<a id="controlLink" href="javascript:void(0)">Start/Stop</a><br />
				<a id="clearLink" href="javascript:void(0)">Clear Grid</a><br />
				<a id="createGrassLink" href="javascript:void(0)">Create Grass</a>			</div>
		</div>
</body>
</html>